Snippet 1:
Description: For example, you can use a code to print only a particular range of cells just with a single click instead of selecting the range > File Tab > Print > Print Select > OK Button.
Code:
Sub AddSerialNumbers()Dim i As IntegerOn Error GoTo Lasti = InputBox("Enter Value", "Enter Serial Numbers")For i = 1 To iActiveCell.Value = iActiveCell.Offset(1, 0).ActivateNext iLast:Exit SubEnd Sub
----------------------------------------
Snippet 2:
Description: Before you use these codes, make sure you have your developer tab on your Excel ribbon to access VB editor. Once you activate developer tab you can use below steps to paste a VBA code into VB editor.
Code:
Sub InsertMultipleColumns()Dim i As IntegerDim j As IntegerActiveCell.EntireColumn.SelectOn Error GoTo Lasti = InputBox("Enter number of columns to insert", "Insert Columns")For j = 1 To iSelection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromRightorAboveNext jLast: Exit SubEnd Sub
----------------------------------------
Snippet 3:
Description: Learn VBA in 1 Hour
Code:
Sub InsertMultipleRows()Dim i As IntegerDim j As IntegerActiveCell.EntireRow.SelectOn Error GoTo Lasti = InputBox("Enter number of columns to insert", "Insert Columns")For j = 1 To iSelection.Insert Shift:=xlToDown, CopyOrigin:=xlFormatFromRightorAboveNext jLast: Exit SubEnd Sub
----------------------------------------
Snippet 4:
Description: This macro code will automatically add serial numbers to your Excel sheet, which can be helpful if you work with large amounts of data.
Code:
Sub AutoFitColumns()Cells.SelectCells.EntireColumn.AutoFitEnd Sub
----------------------------------------
Snippet 5:
Description: To use this code, you need to select the cell from where you want to start the serial numbers and when you run this it shows you a message box where you need to enter the highest number for the serial numbers and click OK.
Code:
Sub AutoFitRows()Cells.SelectCells.EntireRow.AutoFitEnd Sub
----------------------------------------
Snippet 6:
Description: And once you click OK, it simply runs a loop and add a list of serial numbers to the cells downward.
Code:
Sub RemoveTextWrap()Range("A1").WrapText = FalseEnd Sub
----------------------------------------
Snippet 7:
Description: This code helps you to enter multiple columns in a single click.
Code:
Sub UnmergeCells()Selection.UnMergeEnd Sub
----------------------------------------
Snippet 8:
Description: When you run this code, it asks you the number columns you want to add and when you click OK, it adds entered number of columns after the selected cell. If you want to add columns before the selected cell, replace the xlToRight to xlToLeft in the code.
Code:
Sub OpenCalculator()Application.ActivateMicrosoftApp Index:=0End Sub
----------------------------------------
Snippet 9:
Description: With this code, you can enter multiple rows in the worksheet. When you run this code, you can enter the number of rows to insert and make sure to select the cell from where you want to insert the new rows.
Code:
Sub DateInHeader()With ActiveSheet.PageSetup.LeftHeader = "".CenterHeader = "&D".RightHeader = "".LeftFooter = "".CenterFooter = "".RightFooter = ""End WithEnd Sub
----------------------------------------
Snippet 10:
Description: If you want to add rows before the selected cell, replace the xlToDown to xlToUp in the code.
Code:
Sub CustomHeader()Dim myText As StringmyText = InputBox("Enter your text here", "Enter Text")With ActiveSheet.PageSetup.LeftHeader = "".CenterHeader = myText.RightHeader = "".LeftFooter = "".CenterFooter = "".RightFooter = ""End WithEnd Sub
----------------------------------------
Snippet 11:
Description: This code quickly auto fits all the columns in your worksheet.
Code:
Sub HighlightDuplicateValues()Dim myRange As RangeDim myCell As RangeSet myRange = SelectionFor Each myCell In myRangeIf WorksheetFunction.CountIf(myRange, myCell.Value) &gt; 1 ThenmyCell.Interior.ColorIndex = 36End IfNext myCellEnd Sub
----------------------------------------
Snippet 12:
Description: When you run this code, it will select all the cells in your worksheet and instantly auto-fit all the columns.
Code:
Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)Dim strRange As StringstrRange = Target.Cells.Address & "," & _Target.Cells.EntireColumn.Address & "," & _Target.Cells.EntireRow.AddressRange(strRange).SelectEnd Sub
----------------------------------------
Snippet 13:
Description: You can use this code to auto fit all the rows in a worksheet.
Code:
Sub TopTen()Selection.FormatConditions.AddTop10Selection.FormatConditions(Selection.FormatConditions.Count).StFirstPriorityWith Selection.FormatConditions(1).TopBottom = xlTop10Top.Rank = 10.Percent = FalseEnd WithWith Selection.FormatConditions(1).Font.Color = -16752384.TintAndShade = 0End WithWith Selection.FormatConditions(1).Interior.PatternColorIndex = xlAutomatic.Color = 13561798.TintAndShade = 0End WithSelection.FormatConditions(1).StopIfTrue = FalseEnd Sub
----------------------------------------
Snippet 14:
Description: When you run this code, it will select all the cells in your worksheet and instantly auto fit all the rows.
Code:
Sub HighlightRanges()Dim RangeName As NameDim HighlightRange As RangeOn Error Resume NextFor Each RangeName In ActiveWorkbook.NamesSet HighlightRange = RangeName.RefersToRangeHighlightRange.Interior.ColorIndex = 36Next RangeNameEnd Sub
----------------------------------------
Snippet 15:
Description: This code will help you to remove text wrap from the entire worksheet with a single click.
Code:
Sub HighlightLowerThanValues()Dim i As Integeri = InputBox("Enter Lower Than Value", "Enter Value")Selection.FormatConditions.DeleteSelection.FormatConditions.Add _Type:=xlCellValue, _Operator:=xlLower, _Formula1:=iSelection.FormatConditions(Selection.FormatConditions.Count).StFirstPriorityWith Selection.FormatConditions(1).Font.Color = RGB(0, 0, 0).Interior.Color = RGB(217, 83, 79)End WithEnd Sub
----------------------------------------
Snippet 16:
Description: It will first select all the columns and then remove text wrap and auto fit all the rows and columns. There’s also a shortcut that you can use (Alt + H +‌W) for but if you add this code to Quick Access Toolbar it’s convenient than a keyboard shortcut.
Code:
Sub highlightNegativeNumbers()Dim Rng As RangeFor Each Rng In SelectionIf WorksheetFunction.IsNumber(Rng) ThenIf Rng.Value &lt; 0 ThenRng.Font.Color= -16776961End IfEnd IfNextEnd Sub
----------------------------------------
Snippet 17:
Description: This code simply uses the unmerge options which you have on the HOME‌ tab.
Code:
Sub highlightValue()Dim myStr As StringDim myRg As rangeDim myTxt As StringDim myCell As rangeDim myChar As StringDim I As LongDim J As LongOn Error Resume NextIf ActiveWindow.RangeSelection.Count &gt; 1 ThenmyTxt = ActiveWindow.RangeSelection.AddressLocalElsemyTxt = ActiveSheet.UsedRange.AddressLocalEnd IfLInput: Set myRg = _Application.InputBox _("please select the data range:", "Selection Required", myTxt, , , , , 8)If myRg Is Nothing ThenExit SubIf myRg.Areas.Count &gt; 1 ThenMsgBox "not support multiple columns"GoTo LInputEnd IfIf myRg.Columns.Count &lt;&gt; 2 ThenMsgBox "the selected range can only contain two columns "GoTo LInputEnd IfFor I = 0 To myRg.Rows.Count - 1myStr = myRg.range("B1").Offset(I, 0).ValueWith myRg.range("A1").Offset(I, 0).Font.ColorIndex = 1For J = 1 To Len(.Text)Mid(.Text, J, Len(myStr)) = myStrThen.Characters(J, Len(myStr)).Font.ColorIndex = 3NextEnd WithNext IEnd Sub
----------------------------------------
Snippet 18:
Description: The benefit of using this code is you can add it to the QAT and unmerge all the cell in the selection. And if you want to un-merge a specific range you can define that range in the code by replacing the word selection.
Code:
Sub highlightCommentCells()Selection.SpecialCells(xlCellTypeComments).SelectSelection.Style= "Note"End Sub
----------------------------------------
Snippet 19:
Description: In Windows, there is a specific calculator and by using this macro code you can open that calculator directly from Excel.
Code:
Sub highlightAlternateRows()Dim rng As RangeFor Each rng In Selection.RowsIf rng.Row Mod 2 = 1 Thenrng.Style = "20% -Accent1"rng.Value = rng ^ (1 / 3)ElseEnd IfNext rngEnd Sub
----------------------------------------
Snippet 20:
Description: As I mentioned that it’s for windows and if you run this code in the MAC version of VBA you’ll get an error.
Code:
Sub HighlightMisspelledCells()Dim rng As RangeFor Each rng In ActiveSheet.UsedRangeIf Not Application.CheckSpelling(word:=rng.Text) Thenrng.Style = "Bad"End IfNext rngEnd Sub
----------------------------------------
Snippet 21:
Description: This macro adds a date to the header when you run it. It simply uses the tag “&D” for adding the date.
Code:
Sub highlightErrors()Dim rng As RangeDim i As IntegerFor Each rng In ActiveSheet.UsedRangeIf WorksheetFunction.IsError(rng) Theni = i + 1rng.Style = "bad"End IfNext rngMsgBox _"There are total " & i _& " error(s) in this worksheet."End Sub
----------------------------------------
Snippet 22:
Description: You can also change it to the footer or change the side by replacing the “” with the date tag. And if you want to add a specific date instead of the current date you can replace the “&D” tag with that date from the code.
Code:
Sub highlightSpecificValues()Dim rng As rangeDim i As IntegerDim c As Variantc = InputBox("Enter Value To Highlight")For Each rng In ActiveSheet.UsedRangeIf rng = c Thenrng.Style = "Note"i = i + 1End IfNext rngMsgBox "There are total " & i & " " & c & " in this worksheet."End Sub
----------------------------------------
Snippet 23:
Description: When you run this code, it shows an input box that asks you to enter the text which you want to add as a header, and once you enter it click OK.
Code:
Sub blankWithSpace()Dim rng As RangeFor Each rng In ActiveSheet.UsedRangeIf rng.Value = " " Thenrng.Style = "Note"End IfNext rngEnd Sub
----------------------------------------
Snippet 24:
Description: If you see this closely you have six different lines of code to choose the place for the header or footer. Let’s say if you want to add left-footer instead of center header simply replace the “myText” to that line of the code by replacing the “” from there.
Code:
Sub highlightMaxValue()Dim rng As RangeFor Each rng In SelectionIf rng = WorksheetFunction.Max(Selection) Thenrng.Style = "Good"End IfNext rngEnd Sub
----------------------------------------
Snippet 25:
Description: These VBA codes will help you to format cells and ranges using some specific criteria and conditions.
Code:
Sub Highlight_Min_Value()Dim rng As RangeFor Each rng In SelectionIf rng = WorksheetFunction.Min(Selection) Thenrng.Style = "Good"End IfNext rngEnd Sub
----------------------------------------
Snippet 26:
Description: This macro will check each cell of your selection and highlight the duplicate values.  You can also change the color from the code.
Code:
Sub highlightUniqueValues()Dim rng As RangeSet rng = Selectionrng.FormatConditions.DeleteDim uv As UniqueValuesSet uv = rng.FormatConditions.AddUniqueValuesuv.DupeUnique = xlUniqueuv.Interior.Color = vbGreenEnd Sub
----------------------------------------
Snippet 27:
Description: I really love to use this macro code whenever I have to analyze a data table.
Code:
Sub columnDifference()Range("H7:H8,I7:I8").SelectSelection.ColumnDifferences(ActiveCell).SelectSelection.Style= "Bad"End Sub
----------------------------------------
Snippet 28:
Description: Here are the quick steps to apply this code.
Code:
Sub rowDifference()Range("H7:H8,I7:I8").SelectSelection.RowDifferences(ActiveCell).SelectSelection.Style= "Bad"End Sub
----------------------------------------
Snippet 29:
Description: Remember that, by applying this macro you will not able to edit the cell by double click.
Code:
Sub printComments()With ActiveSheet.PageSetup.printComments = xlPrintSheetEndEnd WithEnd Sub
----------------------------------------
Snippet 30:
Description: Just select a range and run this macro and it will highlight top 10 values with the green color.
Code:
Sub printNarrowMargin()With ActiveSheet.PageSetup.LeftMargin = Application.InchesToPoints (0.25).RightMargin = Application.InchesToPoints(0.25).TopMargin = Application.InchesToPoints(0.75).BottomMargin = Application.InchesToPoints(0.75).HeaderMargin = Application.InchesToPoints(0.3).FooterMargin = Application.InchesToPoints(0.3)End WithActiveWindow.SelectedSheets.PrintOut _Copies:=1, _Collate:=True, _IgnorePrintAreas:=FalseEnd Sub
----------------------------------------
Snippet 31:
Description: If you are not sure about how many named ranges you have in your worksheet then you can use this code to highlight all of them.
Code:
Sub printSelection()Selection.PrintOut Copies:=1, Collate:=TrueEnd Sub
----------------------------------------
Snippet 32:
Description: Once you run this code it will ask you for the value from which you want to highlight all greater values.
Code:
Sub printCustomSelection()Dim startpage As IntegerDim endpage As Integerstartpage = _InputBox("Please Enter Start Page number.", "Enter Value")If Not WorksheetFunction.IsNumber(startpage) ThenMsgBox _"Invalid Start Page number. Please try again.", "Error"Exit SubEnd Ifendpage = _InputBox("Please Enter End Page number.", "Enter Value")If Not WorksheetFunction.IsNumber(endpage) ThenMsgBox _"Invalid End Page number. Please try again.", "Error"Exit SubEnd IfSelection.PrintOut From:=startpage, _To:=endpage, Copies:=1, Collate:=TrueEnd Sub
----------------------------------------
Snippet 33:
Description: Once you run this code it will ask you for the value from which you want to highlight all lower values.
Code:
Sub HideWorksheet()Dim ws As WorksheetFor Each ws In ThisWorkbook.WorksheetsIf ws.Name &lt;&gt; ThisWorkbook.ActiveSheet.Name Thenws.Visible = xlSheetHiddenEnd IfNext wsEnd Sub
----------------------------------------
Snippet 34:
Description: Select a range of cells and run this code. It will check each cell from the range and highlight all cells where you have a negative number.
Code:
Sub UnhideAllWorksheet()Dim ws As WorksheetFor Each ws In ActiveWorkbook.Worksheetsws.Visible = xlSheetVisibleNext wsEnd Sub
----------------------------------------
Snippet 35:
Description: Suppose you have a large data set, and you want to check for a particular value. For this, you can use this code. When you run it, you will get an input box to enter the value to search for.
Code:
Sub DeleteWorksheets()Dim ws As WorksheetFor Each ws In ThisWorkbook.WorksheetsIf ws.name &lt;&gt; ThisWorkbook.ActiveSheet.name ThenApplication.DisplayAlerts = Falsews.DeleteApplication.DisplayAlerts = TrueEnd IfNext wsEnd Sub
----------------------------------------
Snippet 36:
Description: To highlight all the cells with comments use this macro.
Code:
Sub ProtectAllWorskeets()Dim ws As WorksheetDim ps As Stringps = InputBox("Enter a Password.", vbOKCancel)For Each ws In ActiveWorkbook.Worksheetsws.Protect Password:=psNext wsEnd Sub
----------------------------------------
Snippet 37:
Description: By highlighting alternate rows, you can make your data easily readable, and for this, you can use below VBA code. It will simply highlight every alternate row in selected range.
Code:
Sub Resize_Charts()Dim i As IntegerFor i = 1 To ActiveSheet.ChartObjects.CountWith ActiveSheet.ChartObjects(i).Width = 300.Height = 200End WithNext iEnd Sub
----------------------------------------
Snippet 38:
Description: If you find hard to check all the cells for spelling error, then this code is for you. It will check each cell from the selection and highlight the cell where is a misspelled word.
Code:
Sub InsertMultipleSheets()Dim i As Integeri = _InputBox("Enter number of sheets to insert.", _"Enter Multiple Sheets")Sheets.Add After:=ActiveSheet, Count:=iEnd Sub
----------------------------------------
Snippet 39:
Description: To highlight and count all the cells in which you have an error, this code will help you. Just run this code and it will return a message with the number error cells and highlight all the cells.
Code:
Sub ProtectWS()ActiveSheet.Protect "mypassword", True, TrueEnd Sub
----------------------------------------
Snippet 40:
Description: This code will help you to count the cells which have a specific value which you will mention and after that highlight all those cells.
Code:
Sub UnprotectWS()ActiveSheet.Unprotect "mypassword"End Sub
----------------------------------------
Snippet 41:
Description: Sometimes there are some cells which are blank, but they have a single space and due to this, it’s really hard to identify them. This code will check all the cell in the worksheet and highlight all the cells which have a single space.
Code:
Sub SortWorksheets()Dim i As IntegerDim j As IntegerDim iAnswer As VbMsgBoxResultiAnswer = MsgBox("Sort Sheets in Ascending Order?" & Chr(10) _& "Clicking No will sort in Descending Order", _vbYesNoCancel + vbQuestion + vbDefaultButton1, "Sort Worksheets")For i = 1 To Sheets.CountFor j = 1 To Sheets.Count - 1If iAnswer = vbYes ThenIf UCase$(Sheets(j).Name) &gt; UCase$(Sheets(j + 1).Name) ThenSheets(j).Move After:=Sheets(j + 1)End IfElseIf iAnswer = vbNo ThenIf UCase$(Sheets(j).Name) &lt; UCase$(Sheets(j + 1).Name) Then Sheets(j).Move After:=Sheets(j + 1)End IfEnd IfNext jNext iEnd Sub
----------------------------------------
Snippet 42:
Description: It will check all the selected cells and highlight the cell with the maximum value.
Code:
Sub lockCellsWithFormulas()With ActiveSheet.Unprotect.Cells.Locked = False.Cells.SpecialCells(xlCellTypeFormulas).Locked = True.Protect AllowDeletingRows:=TrueEnd WithEnd Sub
----------------------------------------
Snippet 43:
Description: It will check all the selected cells and highlight the cell with the Minimum value.
Code:
Sub deleteBlankWorksheets()Dim Ws As WorksheetOn Error Resume NextApplication.ScreenUpdating= FalseApplication.DisplayAlerts= FalseFor Each Ws In Application.WorksheetsIf Application.WorksheetFunction.CountA(Ws.UsedRange) = 0 ThenWs.DeleteEnd IfNextApplication.ScreenUpdating= TrueApplication.DisplayAlerts= TrueEnd Sub
----------------------------------------
Snippet 44:
Description: This code will highlight all the cells from the selection which has a unique value.
Code:
Sub UnhideRowsColumns()Columns.EntireColumn.Hidden = FalseRows.EntireRow.Hidden = FalseEnd Sub
----------------------------------------
Snippet 45:
Description: Using this code, you can highlight the difference between two columns (corresponding cells).
Code:
Sub SaveWorkshetAsPDF()Dimws As WorksheetFor Each ws In Worksheetsws.ExportAsFixedFormat _xlTypePDF, _"ENTER-FOLDER-NAME-HERE" &; _ws.Name & ".pdf"Next wsEnd Sub
----------------------------------------
Snippet 46:
Description: And by using this code you can highlight difference between two row (corresponding cells).
Code:
Sub DisablePageBreaks()Dim wb As WorkbookDim wks As WorksheetApplication.ScreenUpdating = FalseFor Each wb In Application.WorkbooksFor Each Sht In wb.WorksheetsSht.DisplayPageBreaks = FalseNext ShtNext wbApplication.ScreenUpdating = TrueEnd Sub
----------------------------------------
Snippet 47:
Description: Use this macro to activate settings to print cell comments in the end of the page. Let’s say you have 10 pages to print, after using this code you will get all the comments on 11th last page.
Code:
Sub FileBackUp()ThisWorkbook.SaveCopyAs Filename:=ThisWorkbook.Path & _"" & Format(Date, "mm-dd-yy") & " " & _ThisWorkbook.nameEnd Sub
----------------------------------------
Snippet 48:
Description: Use this VBA code to take a print with a narrow margin. When you run this macro it will automatically change margins to narrow.
Code:
Sub CloseAllWorkbooks()Dim wbs As WorkbookFor Each wbs In Workbookswbs.Close SaveChanges:=TrueNext wbEnd Sub
----------------------------------------
Snippet 49:
Description: This code will help you print selected range. You don’t need to go to printing options and set printing range. Just select a range and run this code.
Code:
Sub CopyWorksheetToNewWorkbook()ThisWorkbook.ActiveSheet.Copy _Before:=Workbooks.Add.Worksheets(1)End Sub
----------------------------------------
Snippet 50:
Description: Instead of using the setting from print options you can use this code to print custom page range. Let’s say you want to print pages from 5 to 10. You just need to run this VBA code and enter start page and end page.
Code:
Sub Send_Mail()Dim OutApp As ObjectDim OutMail As ObjectSet OutApp = CreateObject("Outlook.Application")Set OutMail = OutApp.CreateItem(0)With OutMail.to = "Sales@FrontLinePaper.com".Subject = "Growth Report".Body = "Hello Team, Please find attached Growth Report.".Attachments.Add ActiveWorkbook.FullName.displayEnd WithSet OutMail = NothingSet OutApp = NothingEnd Sub
----------------------------------------
Snippet 51:
Description: Now, let’s say if you want to hide all the worksheets in your workbook other than the active worksheet. This macro code will do this for you.
Code:
Sub OpenWorkbookAsAttachment()Application.Dialogs(xlDialogSendMail).ShowEnd Sub
----------------------------------------
Snippet 52:
Description: Related: VBA Functions List
Code:
Sub auto_open()MsgBox _"Welcome To ExcelChamps &amp; Thanks for downloading this file."End Sub
----------------------------------------
Snippet 53:
Description: And if you want to un-hide all the worksheets which you have hide with previous code, here is the code for that.
Code:
Sub auto_close()MsgBox "Bye Bye! Don't forget to check other cool stuff onexcelchamps.com"End Sub
----------------------------------------
Snippet 54:
Description: If you want to delete all the worksheets other than the active sheet, this macro is useful for you. When you run this macro, it will compare the name of the active worksheet with other worksheets and then delete them.
Code:
Sub VisibleWorkbooks()Dim book As WorkbookDim i As IntegerFor Each book In WorkbooksIf book.Saved = False Theni = i + 1End IfNext bookMsgBox iEnd Sub
----------------------------------------
Snippet 55:
Description: If you want to protect your all worksheets in one go here is a code for you. When you run this macro, you will get an input box to enter a password. Once you enter your password, click OK. And make sure to take care about CAPS.
Code:
Sub HideSubtotals()Dim pt As PivotTableDim pf As PivotFieldOn Error Resume NextSet pt = ActiveSheet.PivotTables(ActiveCell.PivotTable.Name)If pt Is Nothing ThenMsgBox "You must place your cursor inside of a PivotTable."Exit SubEnd IfFor Each pf In pt.PivotFieldspf.Subtotals(1) = Truepf.Subtotals(1) = FalseNext pfEnd Sub
----------------------------------------
Snippet 56:
Description: Make all chart same in size. This macro code will help you to make all the charts of the same size. You can change the height and width of charts by changing it in macro code.
Code:
Sub vba_referesh_all_pivots()Dim pt As PivotTableFor Each pt In ActiveWorkbook.PivotTablespt.RefreshTableNext ptEnd Sub
----------------------------------------
Snippet 57:
Description: You can use this code if you want to add multiple worksheets in your workbook in a single shot. When you run this macro code you will get an input box to enter the total number of sheets you want to enter.
Code:
Sub UpdatePivotTableRange()Dim Data_Sheet As WorksheetDim Pivot_Sheet As WorksheetDim StartPoint As RangeDim DataRange As RangeDim PivotName As StringDim NewRange As StringDim LastCol As LongDim lastRow As Long'Set Pivot Table &amp; Source WorksheetSet Data_Sheet = ThisWorkbook.Worksheets("PivotTableData3")Set Pivot_Sheet = ThisWorkbook.Worksheets("Pivot3")'Enter in Pivot Table NamePivotName = "PivotTable2"'Defining Staring Point &amp; Dynamic RangeData_Sheet.ActivateSet StartPoint = Data_Sheet.Range("A1")LastCol = StartPoint.End(xlToRight).ColumnDownCell = StartPoint.End(xlDown).RowSet DataRange = Data_Sheet.Range(StartPoint, Cells(DownCell, LastCol))NewRange = Data_Sheet.Name &amp; "!" &amp; DataRange.Address(ReferenceStyle:=xlR1C1)'Change Pivot Table Data Source Range AddressPivot_Sheet.PivotTables(PivotName). _ChangePivotCache ActiveWorkbook. _PivotCaches.Create(SourceType:=xlDatabase, SourceData:=NewRange)'Ensure Pivot Table is RefreshedPivot_Sheet.PivotTables(PivotName).RefreshTable'Complete MessagePivot_Sheet.ActivateMsgBox "Your Pivot Table is now updated."End Sub
----------------------------------------
Snippet 58:
Description: If you want to protect your worksheet you can use this macro code. All you have to do just mention your password in the code.
Code:
Sub activateGetPivotData()Application.GenerateGetPivotData = TrueEnd SubSub deactivateGetPivotData()Application.GenerateGetPivotData = FalseEnd Sub
----------------------------------------
Snippet 59:
Description: If you want to unprotect your worksheet you can use this macro code. All you have to do just mention your password which you have used while protecting your worksheet.
Code:
Sub ChangeChartType()ActiveChart.ChartType = xlColumnClusteredEnd Sub
----------------------------------------
Snippet 60:
Description: This code will help you to sort worksheets in your workbook according to their name.
Code:
Sub ConvertChartToPicture()ActiveChart.ChartArea.CopyActiveSheet.Range("A1").SelectActiveSheet.Pictures.Paste.SelectEnd Sub
----------------------------------------
Snippet 61:
Description: To protect cell with formula with a single click you can use this code.
Code:
Sub AddChartTitle()Dim i As Varianti = InputBox("Please enter your chart title", "Chart Title")On Error GoTo LastActiveChart.SetElement (msoElementChartTitleAboveChart)ActiveChart.ChartTitle.Text = iLast:Exit SubEnd Sub
----------------------------------------
Snippet 62:
Description: Run this code and it will check all the worksheets in the active workbook and delete if a worksheet is blank.
Code:
Sub HideSubtotals()Dim pt As PivotTableDim pf As PivotFieldOn Error Resume NextSet pt = ActiveSheet.PivotTables(ActiveCell.PivotTable.name)If pt Is Nothing ThenMsgBox "You must place your cursor inside of a PivotTable."Exit SubEnd IfFor Each pf In pt.PivotFieldspf.Subtotals(1) = Truepf.Subtotals(1) = FalseNext pfEnd Sub
----------------------------------------
Snippet 63:
Description: Instead of unhiding rows and columns on by one manually you can use this code to do this in a single go.
Code:
Sub TableofContent()Dim i As LongOn Error Resume NextApplication.DisplayAlerts = FalseWorksheets("Table of Content").DeleteApplication.DisplayAlerts = TrueOn Error GoTo 0ThisWorkbook.Sheets.Add Before:=ThisWorkbook.Worksheets(1)ActiveSheet.Name = "Table of Content"For i = 1 To Sheets.CountWith ActiveSheet.Hyperlinks.Add _Anchor:=ActiveSheet.Cells(i, 1), _Address:="", _SubAddress:="'" &amp; Sheets(i).Name &amp; "'!A1", _ScreenTip:=Sheets(i).Name, _TextToDisplay:=Sheets(i).NameEnd WithNext iEnd Sub
----------------------------------------
Snippet 64:
Description: This code will simply save all the worksheets in a separate PDF file. You just need to change the folder name from the code.
Code:
Sub PasteAsPicture()Application.CutCopyMode = FalseSelection.CopyActiveSheet.Pictures.Paste.SelectEnd Sub
----------------------------------------
Snippet 65:
Description: To disable page breaks use this code. It will simply disable page breaks from all the open workbooks.
Code:
Sub LinkedPicture()Selection.CopyActiveSheet.Pictures.Paste(Link:=True).SelectEnd Sub
----------------------------------------
Snippet 66:
Description: These codes will help you to perform workbook level tasks in an easy way and with minimum efforts.
Code:
Sub Speak()Selection.SpeakEnd Sub
----------------------------------------
Snippet 67:
Description: This is one of the most useful macros which can help you to save a backup file of your current workbook.
Code:
Sub DataForm()ActiveSheet.ShowDataFormEnd Sub
----------------------------------------
Snippet 68:
Description: It will save a backup file in the same directory where your current file is saved and it will also add the current date with the name of the file.
Code:
Sub GoalSeekVBA()Dim Target As LongOn Error GoTo ErrorhandlerTarget = InputBox("Enter the required value", "Enter Value")Worksheets("Goal_Seek").ActivateWith ActiveSheet.Range("C7").GoalSeek_ Goal:=Target, _ChangingCell:=Range("C2")End WithExit SubErrorhandler: MsgBox ("Sorry, value is not valid.")End Sub
----------------------------------------
Snippet 69:
Description: Use this macro code to close all open workbooks. This macro code will first check all the workbooks one by one and close them.
Code:
Sub SearchWindow32()Dim chromePath As StringDim search_string As StringDim query As Stringquery = InputBox("Enter here your search here", "Google Search")search_string = querysearch_string = Replace(search_string, " ", "+")'Uncomment the following line for Windows 64 versions and comment out Windows 32 versions''chromePath = "C:Program FilesGoogleChromeApplicationchrome.exe"'Uncomment the following line for Windows 32 versions and comment out Windows 64 versions'chromePath = "C:Program Files (x86)GoogleChromeApplicationchrome.exe"Shell (chromePath &amp; " -url http://google.com/#q=" &amp; search_string)End Sub
----------------------------------------
Snippet 70:
Description: If any of the worksheets is not saved, you’ll get a message to save it.
Code:
Sub convertToValues()Dim MyRange As RangeDim MyCell As RangeSelect Case _MsgBox("You Can't Undo This Action. " _&amp; "Save Workbook First?", vbYesNoCancel, _"Alert")Case Is = vbYesThisWorkbook.SaveCase Is = vbCancelExit SubEnd SelectSet MyRange = SelectionFor Each MyCell In MyRangeIf MyCell.HasFormula ThenMyCell.Formula = MyCell.ValueEnd IfNext MyCellEnd Sub
----------------------------------------
Snippet 71:
Description: Let’s say if you want to copy your active worksheet in a new workbook, just run this macro code and it will do the same for you.
Code:
Sub RemoveSpaces()Dim myRange As RangeDim myCell As RangeSelect Case MsgBox("You Can't Undo This Action. " _&amp; "Save Workbook First?", _vbYesNoCancel, "Alert")Case Is = vbYesThisWorkbook.SaveCase Is = vbCancelExit SubEnd SelectSet myRange = SelectionFor Each myCell In myRangeIf Not IsEmpty(myCell) ThenmyCell = Trim(myCell)End IfNext myCellEnd Sub
----------------------------------------
Snippet 72:
Description: It’s a super time saver.
Code:
Public Function removeFirstC(rng As String, cnt As Long)removeFirstC = Right(rng, Len(rng) - cnt)End Function
----------------------------------------
Snippet 73:
Description: Use this macro code to quickly send your active workbook in an e-mail. You can change the subject, email, and body text in code and if you want to send this mail directly, use “.Send” instead of “.Display”.
Code:
Sub degreeSymbol( )Dim rng As RangeFor Each rng In Selectionrng.SelectIf ActiveCell &lt;&gt; "" ThenIf IsNumeric(ActiveCell.Value) ThenActiveCell.Value = ActiveCell.Value &amp; "°"End IfEnd IfNextEnd Sub
----------------------------------------
Snippet 74:
Description: Once you run this macro it will open your default mail client and attached active workbook with it as an attachment.
Code:
Public Function rvrse(ByVal cell As Range) As Stringrvrse = VBA.strReverse(cell.Value)End Function
----------------------------------------
Snippet 75:
Description: You can use auto_open to perform a task on opening a file and all you have to do just name your macro “auto_open”.
Code:
Sub ActivateR1C1()If Application.ReferenceStyle = xlA1 ThenApplication.ReferenceStyle = xlR1C1ElseApplication.ReferenceStyle = xlR1C1End IfEnd Sub
----------------------------------------
Snippet 76:
Description: You can use close_open to perform a task on opening a file and all you have to do just name your macro “close_open”.
Code:
Sub ActivateA1()If Application.ReferenceStyle = xlR1C1 ThenApplication.ReferenceStyle = xlA1ElseApplication.ReferenceStyle = xlA1End IfEnd Sub
----------------------------------------
Snippet 77:
Description: Let’s you have 5-10 open workbooks; you can use this code to get the number of workbooks which are not saved yet.
Code:
Sub TimeStamp()Dim i As IntegerFor i = 1 To 24ActiveCell.FormulaR1C1 = i &amp; ":00"ActiveCell.NumberFormat = "[$-409]h:mm AM/PM;@"ActiveCell.Offset(RowOffset:=1, ColumnOffset:=0).SelectNext iEnd Sub
----------------------------------------
Snippet 78:
Description: If you want to hide all the subtotals, just run this code. First of all, make sure to select a cell from your pivot table and then run this macro.
Code:
Sub date2day()Dim tempCell As RangeSelection.Value = Selection.ValueFor Each tempCell In SelectionIf IsDate(tempCell) = True ThenWith tempCell.Value = Day(tempCell).NumberFormat = "0"End WithEnd IfNext tempCellEnd Sub
----------------------------------------
Snippet 79:
Description: A super quick method to refresh all pivot tables. Just run this code and all of your pivot tables in your workbook will be refresh in a single shot.
Code:
Sub date2year()Dim tempCell As RangeSelection.Value = Selection.ValueFor Each tempCell In SelectionIf IsDate(tempCell) = True ThenWith tempCell.Value = Year(tempCell).NumberFormat = "0"End WithEnd IfNext tempCellEnd Sub
----------------------------------------
Snippet 80:
Description: Follow this step-by-step guide to create a pivot table using VBA.
Code:
Sub removeTime()Dim Rng As RangeFor Each Rng In SelectionIf IsDate(Rng) = True ThenRng.Value = VBA.Int(Rng.Value)End IfNextSelection.NumberFormat = "dd-mmm-yy"End Sub
----------------------------------------
Snippet 81:
Description: If you are not using Excel tables, then you can use this code to update pivot table range.
Code:
Sub removeDate()Dim Rng As RangeFor Each Rng In SelectionIf IsDate(Rng) = True ThenRng.Value = Rng.Value - VBA.Fix(Rng.Value)End IfNextSelection.NumberFormat = "hh:mm:ss am/pm"End Sub
----------------------------------------
Snippet 82:
Description: To disable/enable GetPivotData function you need to go to the Excel options. But with this code you can do it in a single click.
Code:
Sub convertUpperCase()Dim Rng As RangeFor Each Rng In SelectionIf Application.WorksheetFunction.IsText(Rng) ThenRng.Value = UCase(Rng)End IfNextEnd Sub
----------------------------------------
Snippet 83:
Description: This code will help you to convert chart type without using chart options from the tab. All you have to do just specify to which type you want to convert. Below code will convert selected chart to a clustered column chart.
Code:
Sub convertLowerCase()Dim Rng As RangeFor Each Rng In SelectionIf Application.WorksheetFunction.IsText(Rng) ThenRng.Value= LCase(Rng)End IfNextEnd Sub
----------------------------------------
Snippet 84:
Description: There are different codes for different types, you can find all those types from here.
Code:
Sub convertProperCase()Dim Rng As RangeFor Each Rng In SelectionIf WorksheetFunction.IsText(Rng) ThenRng.Value = WorksheetFunction.Proper(Rng.Value)End IfNextEnd Sub
----------------------------------------
Snippet 85:
Description: This code will help you to convert your chart into an image. You just need to select your chart and run this code.
Code:
Sub convertTextCase()Dim Rng As RangeFor Each Rng In SelectionIf WorksheetFunction.IsText(Rng) ThenRng.Value = UCase(Left(Rng, 1)) &amp; LCase(Right(Rng, Len(Rng) - 1))End IfNext RngEnd Sub
----------------------------------------
Snippet 86:
Description: First of all, you need to select your chart and the run this code. You will get an input box to enter chart title.
Code:
Sub removeChar()Dim Rng As RangeDim rc As Stringrc = InputBox("Character(s) to Replace", "Enter Value")For Each Rng In SelectionSelection.Replace What:=rc, Replacement:=""NextEnd Sub
----------------------------------------
Snippet 87:
Description: If you want to hide all the subtotals, just run this code. First of all, make sure to select a cell from your pivot table and then run this macro.
Code:
Sub Word_Count_Worksheet()Dim WordCnt As LongDim rng As RangeDim S As StringDim N As LongFor Each rng In ActiveSheet.UsedRange.CellsS = Application.WorksheetFunction.Trim(rng.Text)N = 0If S &lt;&gt; vbNullString ThenN = Len(S) - Len(Replace(S, " ", "")) + 1End IfWordCnt = WordCnt + NNext rngMsgBox "There are total " _&amp; Format(WordCnt, "#,##0") &amp; _" words in the active worksheet"End Sub
----------------------------------------
Snippet 88:
Description: Let’s say you have more than 100 worksheets in your workbook and it’s hard to navigate now. Don’t worry this macro code will rescue everything.
Code:
Sub removeApostrophes()Selection.Value = Selection.ValueEnd Sub
----------------------------------------
Snippet 89:
Description: When you run this code, it will create a new worksheet and create a index of worksheets with a hyperlink to them.
Code:
Sub removeDecimals()Dim lnumber As DoubleDim lResult As LongDim rng As RangeFor Each rng In Selectionrng.Value = Int(rng)rng.NumberFormat = "0"Next rngEnd Sub
----------------------------------------
Snippet 90:
Description: Paste selected range as an image. You just have to select the range and once you run this code it will automatically insert a picture for that range.
Code:
Sub addNumber()Dim rng As RangeDim i As Integeri = InputBox("Enter number to multiple", "Input Required")For Each rng In SelectionIf WorksheetFunction.IsNumber(rng) Thenrng.Value = rng + iElseEnd IfNext rngEnd Sub
----------------------------------------
Snippet 91:
Description: This VBA code will convert your selected range into a linked picture and you can use that image anywhere you want.
Code:
Sub addNumber()Dim rng As RangeDim i As Integeri = InputBox("Enter number to multiple", "Input Required")For Each rng In SelectionIf WorksheetFunction.IsNumber(rng) Thenrng.Value = rng + iElseEnd IfNext rngEnd Sub
----------------------------------------
Snippet 92:
Description: Just select a range and run this code. Excel will speak all the text what you have in that range, cell by cell.
Code:
Sub getSquareRoot()Dim rng As RangeDim i As IntegerFor Each rng In SelectionIf WorksheetFunction.IsNumber(rng) Thenrng.Value = Sqr(rng)ElseEnd IfNext rngEnd Sub
----------------------------------------
Snippet 93:
Description: There is a default data entry form which you can use for data entry.
Code:
Sub getCubeRoot()Dim rng As RangeDimi As IntegerFor Each rng In SelectionIf WorksheetFunction.IsNumber(rng) Thenrng.Value = rng ^ (1 / 3)ElseEnd IfNextrngEnd Sub
----------------------------------------
Snippet 94:
Description: Goal Seek can be super helpful for you to solve complex problems. Learn more about goal seek from here before you use this code.
Code:
Sub addsAlphabets1()Dim i As IntegerFor i = 65 To 90ActiveCell.Value = Chr(i)ActiveCell.Offset(1, 0).SelectNext iEnd SubSub addsAlphabets2()Dim i As IntegerFor i = 97 To 122ActiveCell.Value = Chr(i)ActiveCell.Offset(1, 0).SelectNext iEnd Sub
----------------------------------------
Snippet 95:
Description: Simply convert formulas into values. When you run this macro it will quickly change the formulas into absolute values.
Code:
Sub convertToNumbers()Dim rng As RangeSelection.Value = Selection.ValueFor Each rng In SelectionIf Not WorksheetFunction.IsNonText(rng) Thenrng.Value = WorksheetFunction.Arabic(rng)End IfNext rngEnd Sub
----------------------------------------
Snippet 96:
Description: One of the most useful macros from this list. It will check your selection and then remove all the extra spaces from that.
Code:
Sub removeNegativeSign()Dim rng As RangeSelection.Value = Selection.ValueFor Each rng In SelectionIf WorksheetFunction.IsNumber(rng) Thenrng.Value = Abs(rng)End IfNext rngEnd Sub
----------------------------------------
Snippet 97:
Description: Simply remove characters from the starting of a text string. All you need is to refer to a cell or insert a text into the function and number of characters to remove from the text string.
Code:
Sub replaceBlankWithZero()Dim rng As RangeSelection.Value = Selection.ValueFor Each rng In SelectionIf rng = "" Or rng = " " Thenrng.Value = "0"ElseEnd IfNext rngEnd Sub
----------------------------------------
Snippet 98:
Description: It has two arguments “rng” for the text string and “cnt” for the count of characters to remove. For Example: If you want to remove first characters from a cell, you need to enter 1 in cnt.
Code:
Sub SimpleTimer()    Dim countDown As Date    countDown = Now + TimeValue("00:01:00") ' Set timer for 1 minute    Do Until Now >= countDown        DoEvents    Loop    MsgBox "Time's up!"End Sub
----------------------------------------
Snippet 99:
Description: Let’s say you have a list of numbers in a column and you want to add degree symbol with all of them.
Code:
Sub TextToColumnsAuto()    Dim rng As Range    Set rng = ThisWorkbook.Sheets("Sheet1").Range("A1:A100")    rng.TextToColumns Destination:=rng, DataType:=xlDelimited, Comma:=TrueEnd Sub
----------------------------------------
Snippet 100:
Description: All you have to do just enter “rvrse” function in a cell and refer to the cell in which you have text which you want to reverse.
Code:
Sub UnprotectSheets()    Dim ws As Worksheet    For Each ws In ThisWorkbook.Sheets        ws.Unprotect Password:="password"    Next wsEnd Sub
----------------------------------------
Snippet 101:
Description: This macro code will help you to activate R1C1 reference style without using Excel options.
Code:
Sub CombineWorkbooks()    Dim FilesToOpen    Dim x As Integer    FilesToOpen = Application.GetOpenFilename(FileFilter:="Microsoft Excel Files (*.xls; *.xlsx; *.xlsm), *.xls; *.xlsx; *.xlsm", MultiSelect:=True, Title:="Files to Merge")    If TypeName(FilesToOpen) = "Boolean" Then Exit Sub    x = 1    While x <= UBound(FilesToOpen)        Workbooks.Open Filename:=FilesToOpen(x)        Sheets().Move After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count)        x = x + 1    WendEnd Sub
----------------------------------------
Snippet 102:
Description: This macro code will help you to activate A1 reference style without using Excel options.
Code:
Sub ProtectSheets()    Dim ws As Worksheet    For Each ws In ThisWorkbook.Sheets        ws.Protect Password:="password"    Next wsEnd Sub
----------------------------------------
Snippet 103:
Description: With this code, you can insert a time range in sequence from 00:00 to 23:00.
Code:
Sub SendEmail()    Dim OutApp As Object    Dim OutMail As Object    Set OutApp = CreateObject("Outlook.Application")    Set OutMail = OutApp.CreateItem(0)    With OutMail        .To = "recipient@example.com"        .CC = ""        .BCC = ""        .Subject = "This is the Subject Line"        .Body = "Hello World!"        .Send    End With    Set OutMail = Nothing    Set OutApp = NothingEnd Sub
----------------------------------------
Snippet 104:
Description: If you have dates in your worksheet and you want to convert all those dates into days then this code is for you. Simply select the range of cells and run this macro.
Code:
Sub InsertRows()    Dim i As Long    For i = ThisWorkbook.Sheets("Sheet1").UsedRange.Rows.Count To 1 Step -1        ThisWorkbook.Sheets("Sheet1").Rows(i + 1).Resize(2).Insert    Next iEnd Sub
----------------------------------------
Snippet 105:
Description: This code will convert dates into years.
Code:
Sub SaveBackup()    Dim backupPath As String    backupPath = "C:\Backup\MyWorkbook_" & Format(Now(), "yyyymmdd_hhmmss") & ".xlsm"    ThisWorkbook.SaveCopyAs backupPathEnd Sub
----------------------------------------
Snippet 106:
Description: If you have time with the date and you want to remove it then you can use this code.
Code:
Sub DeleteCharts()    Dim cht As ChartObject    For Each cht In ActiveSheet.ChartObjects        cht.Delete    Next chtEnd Sub
----------------------------------------
Snippet 107:
Description: It will return only time from a date and time value.
Code:
Sub AutoClose()    Dim countDown As Date    countDown = Now + TimeValue("00:10:00") ' Set timer for 10 minutes    Do Until Now >= countDown        If Not Application.Interactive Then Exit Sub        DoEvents    Loop    ThisWorkbook.Close SaveChanges:=FalseEnd Sub
----------------------------------------
Snippet 108:
Description: Select the cells and run this code. It will check each and every cell of selected range and then convert it into upper case text.
Code:
Sub ExportSheetsToWorkbooks()    Dim ws As Worksheet    For Each ws In ThisWorkbook.Worksheets        ws.Copy        ActiveWorkbook.SaveAs "C:\ExportedSheets\" & ws.Name & ".xlsx"        ActiveWorkbook.Close False    Next wsEnd Sub
----------------------------------------
Snippet 109:
Description: This code will help you to convert selected text into lower case text. Just select a range of cells where you have text and run this code. If a cell has a number or any value other than text that value will remain same.
Code:
Sub CreateDirectory()    Dim path As String    path = "C:\NewFolder"    If Not Dir(path, vbDirectory) <> "" Then        MkDir path    End IfEnd Sub
----------------------------------------
Snippet 110:
Description: And this code will convert selected text into the proper case where you have the first letter in capital and rest in small.
Code:
Function NumberToWords(ByVal MyNumber)    Dim Units As String, Teens As String, Tens As String    Dim Result As String    ' Arrays for converting number to words    Units = "|One|Two|Three|Four|Five|Six|Seven|Eight|Nine"    Teens = "|Eleven|Twelve|Thirteen|Fourteen|Fifteen|Sixteen|Seventeen|Eighteen|Nineteen"    Tens = "|Ten|Twenty|Thirty|Forty|Fifty|Sixty|Seventy|Eighty|Ninety"    ' Logic to convert number to words goes here    ' Return the result as a string    Result = "Logic not implemented"    NumberToWords = ResultEnd Sub
----------------------------------------
Snippet 111:
Description: In text case, you have the first letter of the first word in capital and rest all in words in small for a single sentence and this code will help you convert normal text into sentence case.
Code:
Sub AddWatermark()    ActiveSheet.Shapes.AddTextEffect(msoTextEffect1, "Confidential", "Arial", 50, msoFalse, msoFalse, 100, 100).Select    With Selection.ShapeRange.Fill        .Visible = msoTrue        .ForeColor.RGB = RGB(217, 217, 217)        .Transparency = 0.5    End WithEnd Sub
----------------------------------------
Snippet 112:
Description: To remove a particular character from a selected cell you can use this code. It will show you an input box to enter the character you want to remove.
Code:
Sub AutoSort()    With ThisWorkbook.Sheets("Sheet1").Range("A1:D100")        .Sort Key1:=.Cells(1, 1), Order1:=xlAscending, Header:=xlYes    End WithEnd Sub
----------------------------------------
Snippet 113:
Description: It can help you to count all the words from a worksheet.
Code:
Sub PrintAllWorkbooks()    Dim folderPath As String    Dim filename As String    folderPath = "C:\MyFolder\"    filename = Dir(folderPath & "*.xls*")    Do While filename <> ""        Workbooks.Open Filename:=folderPath & filename        ActiveWorkbook.PrintOut Copies:=1        ActiveWorkbook.Close False        filename = Dir()    LoopEnd Sub
----------------------------------------
Snippet 114:
Description: If you have numeric data with an apostrophe before each number, you run this code to remove it.
Code:
Sub HighlightFormulas()    Dim cell As Range    For Each cell In ActiveSheet.UsedRange        If cell.HasFormula Then            cell.Interior.Color = RGB(255, 255, 0)        End If    Next cellEnd Sub
----------------------------------------
